# pages/map_list.py
import dash
from dash import html, dcc, dash_table
import dash_bootstrap_components as dbc
import pandas as pd

# ƒêƒÉng k√Ω trang n√†y v·ªõi ·ª©ng d·ª•ng Dash
# path='/' nghƒ©a l√† ƒë√¢y l√† trang ch·ªß
dash.register_page(__name__, path='/', title='Maps List')

# --- D·ªØ li·ªáu m·∫´u cho b·∫£ng ---
# Trong m·ªôt ·ª©ng d·ª•ng th·ª±c t·∫ø, d·ªØ li·ªáu n√†y s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ database
data = {
    'Name': ['Maptest', 'New615', 'Sanhc7', 'Tang8', 'ghgh', 'lab_813_new', 'map', 'map1', 'map_moi', 'map_moi'],
    'Created by': ['Distributor', 'Administrator', 'Administrator', 'Distributor', 'Administrator', 'Distributor', 'Administrator', 'Administrator', 'Administrator', 'Administrator']
}
df = pd.DataFrame(data)

# Th√™m c·ªôt 'Functions' v·ªõi c√°c icon (d·∫°ng text) ƒë·ªÉ m√¥ ph·ªèng
# ƒê·ªÉ c√°c n√∫t n√†y th·ª±c s·ª± ho·∫°t ƒë·ªông, c·∫ßn s·ª≠ d·ª•ng callback ph·ª©c t·∫°p h∆°n
df['Functions'] = '‚úì  üóô'

# --- Layout c·ªßa trang ---
layout = dbc.Container([
    # Ti√™u ƒë·ªÅ v√† c√°c n√∫t ch·ª©c nƒÉng ch√≠nh
    dbc.Row([
        dbc.Col([
            html.H1("Maps", className="mt-4"),
            html.P("Create and edit maps", className="text-muted")
        ], width=6),
        dbc.Col(
            dbc.ButtonGroup([
                # N√∫t 'Create map' s·∫Ω ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang editor
                dcc.Link(
                    dbc.Button("+ Create map", color="success", className="me-2"),
                    href="/map-editor"
                ),
                dbc.Button("Import site", color="success", outline=True, className="me-2"),
                dbc.Button("Clear filters", color="light")
            ], className="mt-4 float-end"),
            width=6
        )
    ], className="mb-4"),

    # Thanh Filter v√† ph√¢n trang
    dbc.Row([
        dbc.Col(
            dbc.Input(placeholder="Write name to filter by..."),
            width=4
        ),
        dbc.Col(
            html.Span("26 items found", className="align-middle"),
            width="auto",
            className="d-flex align-items-center"
        ),
        dbc.Col(
            dbc.Pagination(max_value=3, active_page=2, className="justify-content-end"),
            width=True
        )
    ], className="mb-3 p-3 bg-light border rounded"),

    # Header c·ªßa b·∫£ng v√† n√∫t Export
    dbc.Row([
        dbc.Col(html.H6("Default site"), width="auto"),
        dbc.Col(dbc.Button("EXPORT", size="sm", color="secondary", outline=True), width="auto", className="ms-auto")
    ], className="p-2 border-bottom"),
    
    # B·∫£ng d·ªØ li·ªáu
    dash_table.DataTable(
        id='table',
        columns=[
            {'name': 'Name', 'id': 'Name'},
            {'name': 'Created by', 'id': 'Created by'},
            # CƒÉn ch·ªânh c·ªôt Functions sang ph·∫£i
            {'name': 'Functions', 'id': 'Functions', 'type': 'text'},
        ],
        data=df.to_dict('records'),
        style_cell={'textAlign': 'left', 'padding': '10px'},
        style_header={
            'backgroundColor': 'white',
            'fontWeight': 'bold',
            'border-bottom': '1px solid black'
        },
        style_table={'border': '1px solid #dee2e6'},
        style_data_conditional=[{
            'if': {'column_id': 'Functions'},
            'textAlign': 'right'
        }],
        style_as_list_view=True, # B·ªè c√°c ƒë∆∞·ªùng k·∫ª d·ªçc
    )
], fluid=True, className="p-4")